from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import openai
import mysql.connector
from dotenv import load_dotenv

# Load API key t·ª´ file .env
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# K·∫øt n·ªëi MySQL
def connect_db():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="123456",
        database="phu"
    )

# L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m
def get_products():
    db = connect_db()
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM product")
    products = cursor.fetchall()
    db.close()
    return products

# L·∫•y h∆∞·ªõng d·∫´n mua h√†ng t·ª´ CSDL
def get_purchase_guide():
    db = connect_db()
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT category, content FROM purchase_guide")
    guides = cursor.fetchall()
    db.close()
    return guides

# T·∫°o Flask app
app = Flask(__name__)
CORS(app)  # Cho ph√©p nh·∫≠n request t·ª´ ReactJS

@app.route("/Chatbot/message", methods=["POST"])
def chat():
    user_input = request.json.get("user_input")
    products = get_products()
    guides = get_purchase_guide()
    
    # L·ªçc c√¢y c·∫£nh v√† d·ª•ng c·ª• l√†m v∆∞·ªùn
    plants = [p for p in products if "C√¢y" in p['name']]
    gardening_tools = [p for p in products if "C√¢y" not in p['name']]
    
    # T·∫°o chu·ªói th√¥ng tin s·∫£n ph·∫©m
    plant_info = "\n".join([f"- {p['name']} ({p['price']} VND)" for p in plants])
    gardening_tool_info = "\n".join([f"- {p['name']} ({p['price']} VND)" for p in gardening_tools])
    
    # T·∫°o n·ªôi dung h∆∞·ªõng d·∫´n mua h√†ng
    guide_info = "\n".join([f"{g['category']}: {g['content']}" for g in guides])
    
    # T·∫°o prompt g·ª≠i t·ªõi OpenAI
    prompt = f"""
    B·∫°n l√† chatbot chuy√™n t∆∞ v·∫•n c√¢y c·∫£nh, d·ª•ng c·ª• l√†m v∆∞·ªùn v√† h∆∞·ªõng d·∫´n mua h√†ng.

    Ch·ªâ tr·∫£ l·ªùi ƒë√∫ng tr·ªçng t√¢m c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng. Kh√¥ng c·∫ßn gi·ªõi thi·ªáu l·∫°i v·ªÅ c√°c th√¥ng tin n·∫øu ng∆∞·ªùi d√πng kh√¥ng h·ªèi c·ª• th·ªÉ.

    N·∫øu ng∆∞·ªùi d√πng ch·ªâ ch√†o (v√≠ d·ª•: "hi", "hello", "xin ch√†o") th√¨ ch·ªâ c·∫ßn ch√†o l·∫°i ng·∫Øn g·ªçn, kh√¥ng c·∫ßn gi·ªõi thi·ªáu th√™m g√¨.

    D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu b·∫°n c√≥ th·ªÉ d√πng n·∫øu c·∫ßn thi·∫øt:

    ### üåø C√¢y c·∫£nh:
    {plant_info}

    ### üõ†Ô∏è D·ª•ng c·ª• l√†m v∆∞·ªùn:
    {gardening_tool_info}

    ### üìñ H∆∞·ªõng d·∫´n mua h√†ng:
    {guide_info}

    Ng∆∞·ªùi d√πng h·ªèi: "{user_input}"

    Tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu v√† ƒë√∫ng tr·ªçng t√¢m. D√πng Markdown n·∫øu c·∫ßn.
    """



    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "B·∫°n l√† chuy√™n gia t∆∞ v·∫•n v·ªÅ c√¢y c·∫£nh. H√£y tr·∫£ l·ªùi ng∆∞·ªùi d√πng "
            "d·ª±a tr√™n d·ªØ li·ªáu c√¢y c·∫£nh v√† ph·ª• ki·ªán l√†m v∆∞·ªùn d∆∞·ªõi ƒë√¢y"},
            {"role": "user", "content": prompt}
        ]
    )

    return jsonify(response["choices"][0]["message"]["content"])

if __name__ == "__main__":
    app.run(debug=False)
